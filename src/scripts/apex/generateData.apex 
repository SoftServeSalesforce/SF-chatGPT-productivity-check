 
         final String ACCOUNT_NAME = 'SoftServe Inc.';
         final String HP_PRODUCT = 'HP ZBook';
         final String MAC_PRODUCT = 'Mac Book Pro';
         final String DELL_PRODUCT = 'Dell Inspiron';
         final String SFDC_PRODUCT = 'SFDC Apex Development';
         final String LWC_PRODUCT = 'LWC Development';


         final String DRAFT_STATUS = 'Draft';
         final String ACTIVATED_STATUS = 'Activated';
         final String SHIPPED_STATUS = 'Shipped';
         final String DELIVERED_STATUS = 'Delivered';

         final Decimal UNIT_PRICE = 1;

		final Integer LINEITEM_PER_ORDER = 5;


       // Create Account
        Account account = new Account();
            account.Name=ACCOUNT_NAME;
            account.AccountNumber='12345';
        database.insert (account); 

		system.debug('account '+account);

		// Create 5 Product records
        List<Product2> products = new List<Product2>();
        products.add(new Product2(Name= HP_PRODUCT, IsActive=true));
        products.add(new Product2(Name= MAC_PRODUCT, IsActive=true));
        products.add(new Product2(Name= DELL_PRODUCT, IsActive=true));
        products.add(new Product2(Name= SFDC_PRODUCT, IsActive=true));
        products.add(new Product2(Name= LWC_PRODUCT, IsActive=true));
        insert products;
		
		system.debug('products '+products);
        
        
        Pricebook2 standardPricebook = [SELECT Id FROM Pricebook2 WHERE IsStandard = true LIMIT 1];

       system.debug('standardPricebook '+standardPricebook);

        List<PricebookEntry> standardPricebookEntries = new List<PricebookEntry>();
        for(Product2 prod : products) {            
            standardPricebookEntries.add(new PricebookEntry(
                Product2Id = prod.Id,
                Pricebook2Id = standardPricebook.Id,
                UnitPrice = UNIT_PRICE,
                IsActive = true
            ));
        }
        insert standardPricebookEntries; 

        Contract contract = new Contract(AccountId = account.Id,StartDate = System.today(),ContractTerm = 12,Status = DRAFT_STATUS);
         database.insert (contract);  

		system.debug('contract '+contract);

        contract.Status = ACTIVATED_STATUS;
        Database.update (contract);
        
        List<Order> orders = new List<Order>();
        for(Integer i = 0; i < 400; i++) {
            orders.add(new Order(
                AccountId = account.Id,
                Status = DRAFT_STATUS,
                ContractId = contract.Id,
                EffectiveDate = System.today(),
                Pricebook2Id = standardPricebook.Id));
        }

         database.insert (orders);      

		system.debug('orders '+orders);

        List<OrderItem> orderItems = new List<OrderItem>();
        for(Order o : orders) {
            for(PricebookEntry pbe : standardPricebookEntries ) {
                orderItems.add(new OrderItem(
                    OrderId = o.Id,
                    PricebookEntryId = pbe.Id,
                    Quantity = 1,
                    UnitPrice = UNIT_PRICE
                ));
            }
        }
       
        database.insert (orderItems);


        // update 400 Orders related to the created Account
        for (Integer i = 0; i < 400; i++) {
            String orderStatus = i < 100 ? DRAFT_STATUS : i < 200 ? ACTIVATED_STATUS : i < 300 ? SHIPPED_STATUS : DELIVERED_STATUS;
            orders[i].Status=orderStatus;
        }
         database.update (orders);

		system.debug('orders with updatesd status '+orders);
        
        List<ContentVersion> contentVersions = new List<ContentVersion>();
        for(Integer i = 0; i < 100; i++) { 
            //String titleInvoice = 'Invoice-' + i + '.pdf'; 
            //String titleTest = 'test-' + i + '.pdf'; 

                contentVersions.add(new ContentVersion(
                    Title = 'Invoice-' + i + '.pdf',                 
                    PathOnClient = 'Invoice-' + i + '.pdf',
                    VersionData = Blob.valueOf('Invoice PDF content') 
                ));            
                contentVersions.add(new ContentVersion(
                    Title = 'test-' + i + '.pdf', 
                    VersionData = Blob.valueOf('Test PDF content'),
                    PathOnClient = 'test-' + i + '.pdf'
                ));
           
        }
        insert contentVersions;  

        List<ContentVersion> contentVersionsList = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id IN :contentVersions];

        List<ContentDocumentLink> cdls = new List<ContentDocumentLink>();

        Integer contentVersionsListSize = contentVersionsList.size() - 1;
        Integer ordersSize = orders.size() - 1;

        for (Integer i = 0; i < 100; i++) {
                cdls.add(new ContentDocumentLink(
                    ContentDocumentId = contentVersionsList[i].ContentDocumentId,
                    LinkedEntityId = orders[i].Id
                )); 
                cdls.add(new ContentDocumentLink(
                    ContentDocumentId = contentVersionsList[contentVersionsListSize - i].ContentDocumentId,
                    LinkedEntityId = orders[ordersSize - i].Id
                ));
            
            	cdls.add(new ContentDocumentLink(
                    ContentDocumentId = contentVersionsList[i].ContentDocumentId,
                    LinkedEntityId = orders[i+150].Id
                ));
            	cdls.add(new ContentDocumentLink(
                    ContentDocumentId = contentVersionsList[contentVersionsListSize - i].ContentDocumentId,
                    LinkedEntityId = orders[i+250].Id
                ));
            
            
        }        
   
insert cdls;